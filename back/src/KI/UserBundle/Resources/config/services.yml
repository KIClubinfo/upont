parameters:
    # Notifications push
    ki_upont.push.gcm: 'AIzaSyCHrIJMqsou89Er6ksjfuqIZQLdOsuky2Q'

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false

    KI\UserBundle\:
        resource: '../../*'
        exclude: '../../{Entity,DataFixtures}'

    KI\UserBundle\Controller\:
        resource: '../../Controller'
        tags: ['controller.service_arguments']

    KI\UserBundle\Command\:
        resource: '../../Command/*'
        tags: ['console.command']

    # Permet de gérer des tokens comme on veut
    KI\UserBundle\Service\TokenService:
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@security.token_storage'

    # Gère l'envoi de mails
    KI\UserBundle\Service\MailerService:
        arguments:
            - '@mailer'
            - '@templating'

    # Interface Google Cloud Messages
    KI\UserBundle\Service\GcmService:
        arguments:
            - '@KI\CoreBundle\Service\CurlService'
            - '%ki_upont.push.gcm%'

    # Interface avancée de gestion des permissions utilisateurs
    KI\UserBundle\Service\PermissionService:
        public: true

    form_login_authenticator:
        class: KI\UserBundle\Security\FormLoginAuthenticator
        arguments:
          - '@lexik_jwt_authentication.jwt_manager'
          - '@event_dispatcher'
          - '@security.password_encoder'
        public: false

    sso_enpc_authenticator:
        class: KI\UserBundle\Security\SsoEnpcLoginAuthenticator
        arguments:
          - '@lexik_jwt_authentication.jwt_manager'
          - '@event_dispatcher'
          - '@KI\UserBundle\Factory\UserFactory'
          - '@KI\UserBundle\Repository\UserRepository'
          - '%proxy_url%'
          - '%proxy_user%'
          - '%upont%'

    KI\UserBundle\Setter\UserSetter:
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    KI\UserBundle\Selector\ClubSelector:
        tags:
           - { name: form.type, alias: club_selector }

    # Écoute les checks d'achievements demandés un peu partout dans le code
    KI\UserBundle\Listener\AchievementCheckListener:
        tags:
            - { name: kernel.event_listener, event: upont.achievement, method: check }

    KI\UserBundle\Listener\JWTCreatedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }

    KI\UserBundle\Listener\JWTDecodedListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }

    # Écoute le lancement de notifications push
    KI\UserBundle\Listener\NotificationListener:
        arguments:
            - '@KI\CoreBundle\Service\CurlService'
            - '%ki_upont.push.gcm%'
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    # Ajoute les gens online
    KI\UserBundle\Listener\OnlineListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    KI\UserBundle\Listener\SendMailUserRegistrationListener:
        tags:
            - { name: kernel.event_listener, event: upont.user_registration, method: sendMail }

    KI\UserBundle\Listener\FacebookImportUserRegistrationListener:
        arguments:
            - '@KI\CoreBundle\Service\CurlService'
            - '@KI\CoreBundle\Service\ImageService'
            - '@doctrine.orm.entity_manager'
            - '%facebook_token%'
        tags:
            - { name: kernel.event_listener, event: upont.user_registration, method: facebookImport }

    # Sert pour la compatibilité FOSUserBundle
    KI\UserBundle\Form\UserType:
        tags:
            - { name: form.type, alias: user }
