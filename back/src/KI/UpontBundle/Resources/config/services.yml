# Permet la validation du formulaire de la classe User par l'UserBundle
services:
    ### LISTENERS ###
    # Listener pour le processus de maintenance
    ki_upont.listener.maintenance:
        class: KI\UpontBundle\EventListener\MaintenanceListener
        arguments:
            container: "@service_container"
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    # Gère le log des connexions
    ki_upont.log:
        class: KI\UpontBundle\EventListener\LogListener
        calls:
            - [ setContainer,[ @service_container ] ]
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: log }

    # Écoute le lancement de notifications push
    ki_upont.listener.notification:
        class: KI\UpontBundle\EventListener\NotificationListener
        arguments:
            container: "@service_container"
        tags:
            - { name: doctrine.event_listener, event: postPersist }

    # Écoute les checks d'achievements demandés un peu partout dans le code
    ki_upont.listener.achievement:
        class: KI\UpontBundle\EventListener\AchievementListener
        arguments:
            container: "@service_container"
        tags:
            - { name: kernel.event_listener, event: upont.achievement, method: check }




    ### SERVICES ###
    # Gère l'upload / le redimensionnement d'images
    ki_upont.images:
        class: KI\UpontBundle\Services\KIImages
        calls:
            - [ setContainer,[ @service_container ] ]
    
    # Communique avec l'API du Foyer
    ki_upont.foyer:
        class: KI\UpontBundle\Services\KIFoyer
        calls:
            - [ setContainer,[ @service_container ] ]
            
            
            
            
            
            
    # Le champ personnalisé d'upload d'image, défini comme un service
    ki_upont.type.imageuploader_selector:
       class: KI\UpontBundle\Form\Type\ImageUploaderSelectorType
       arguments: ["@doctrine.orm.entity_manager","@ki_upont.images"]
       tags:
           - { name: form.type, alias: imageuploader_selector }
   
    # Le champ personnalisé de club défini comme un service
    ki_upont.type.club_selector:
       class: KI\UpontBundle\Form\Type\ClubSelectorType
       arguments: ["@doctrine.orm.entity_manager"]
       tags:
           - { name: form.type, alias: club_selector }     
           
           
           
           

    # Communique avec l'API Gracenote
    ki_upont.gracenote:
        class: KI\UpontBundle\Services\KIGracenote
        calls:
            - [ setContainer,[ @service_container ] ]

    # Communique avec l'API Imdb
    ki_upont.imdb:
        class: KI\UpontBundle\Services\KIImdb
        calls:
            - [ setContainer,[ @service_container ] ]

    # Interface cURL
    ki_upont.curl:
        class: KI\UpontBundle\Services\KICurl
        calls:
            - [ setContainer,[ @service_container ] ]
    
    # Interface cURL
    ki_upont.token:
        class: KI\UpontBundle\Services\KIToken
        calls:
            - [ setContainer,[ @service_container ] ]
            
    #Permet de générer un calendrier ICS pour un utilisateur donné
    ki_upont.calendar:
        class: KI\UpontBundle\Services\KICalendar
        calls:
            - [ setContainer,[ @service_container ] ]
        arguments: [ @doctrine.orm.entity_manager ]

    # Sert pour la compatibilité FOSUserBundle
    ki_upont.registration.form.type:
        class: KI\UpontBundle\Form\Users\UserType
        tags:
            - { name: form.type, alias: user }







    # Permet de gérer le JSON Web Token
    upont_api.event.jwt_response_listener:
        class: %upont_api.event.jwt_response_listener.class%
        arguments:
            container: "@service_container"
            manager: "@doctrine.orm.entity_manager"
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccessResponse }
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }
           
    upont_api.event.jwt_created_listener:
        class: %upont_api.event.jwt_created_listener.class%
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_created, method: onJWTCreated }
            
    upont_api.event.jwt_decoded_listener:
        class: %upont_api.event.jwt_decoded_listener.class%
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_decoded, method: onJWTDecoded }






parameters:
    # Tokens
    upont_api.event.jwt_response_listener.class: KI\UpontBundle\EventListener\JWTResponseListener
    upont_api.event.jwt_created_listener.class: KI\UpontBundle\EventListener\JWTCreatedListener
    upont_api.event.jwt_decoded_listener.class: KI\UpontBundle\EventListener\JWTDecodedListener

    # Images
    upont_images_directory: 'web/uploads/images/'
    upont_maintenance_lock: '/cache/maintenance.lock'
    upont_images_maxSize: 512000 # Taille maximum des images uploadées en octets

    # API Gracenote
    upont_gracenote_key1: '14886144' # Tokens d'accès API Gracenote
    upont_gracenote_key2: '136467B84B6BCA2854F072597B216096'
    upont_gracenote_key3: '280723858430018941-61BBB34090F9F4CD6C5D5F903990135F'

    # Notifications push
    upont_push_GCM_API_key: 'AIzaSyCHrIJMqsou89Er6ksjfuqIZQLdOsuky2Q'
    upont_push_WP_url: ''
